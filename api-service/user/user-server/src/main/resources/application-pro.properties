#引入其他配置文件
#spring.profiles.include         = db
#接口文档版本号
app.version                                                             = 0.0.1
#是否显示swagger文档
swagger.show                                                            = true

server.port                                                             = 18084
server.tomcat.max-connections                                           = 20000
server.tomcat.accept-count                                              = 100
server.tomcat.max-threads                                               = 250
server.tomcat.min-spare-threads                                         = 10




#指定数据库驱动
spring.datasource.driver-class-name                                     = com.mysql.jdbc.Driver
#数据库jdbc连接url地址
spring.datasource.url                                                   = jdbc:mysql://127.0.0.1:3306/ilabservice?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&useSSL=true&serverTimezone=UTC
#数据库账号
spring.datasource.username                                              = root
spring.datasource.password                                              = 123456
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.druid.initial-size                                    = 0
#最大连接池数量
spring.datasource.druid.max-active                                      = 200
#最小连接池数量
spring.datasource.druid.min-idle                                        = 8
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.max-wait                                        = 60000
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements                        = false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-pool-prepared-statement-per-connection-size = -1
#和上面的等价
spring.datasource.druid.max-open-prepared-statements                    = -1
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.druid.validation-query                                = SELECT 1 FROM DUAL
spring.datasource.druid.validation-query-timeout                        = 1000
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow                                  = false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-return                                  = false
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle                                 = true
#有两个含义：
#1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
spring.datasource.druid.time-between-eviction-runs-millis               = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis                  = 300000
#spring.datasource.druid.max-evictable-idle-time-millis                  =
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.druid.filters                                         = stat,wall,slf4j

mybatis-plus.mapper-locations                                           = classpath:mapper/*.xml
#实体扫描，多个package用逗号或者分号分隔
#别名包扫描路径，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名(即 XML 中调用的时候不用包含包名)
mybatis-plus.typeAliasesPackage                                         = com.j.openproject.entity
# 关闭MP3.0自带的banner
mybatis-plus.global-config.banner                                       = false
# 主键类型 0:数据库ID自增 1.未定义 2.用户输入 3 id_worker 4.uuid 5.id_worker字符串表示
mybatis-plus.global-config.db-config.id-type                            = AUTO
# 默认数据库表下划线命名
mybatis-plus.global-config.db-config.table-underline                    = true
mybatis-plus.configuration.map-underscore-to-camel-case                 = true
# 禁用缓存
mybatis-plus.configuration.cache-enabled                                = false
# 是否开启打印日志
mybatis-plus.configuration.log-impl                     = org.apache.ibatis.logging.stdout.StdOutImpl






